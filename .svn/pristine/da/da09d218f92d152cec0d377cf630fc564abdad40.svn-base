package com.sitemap.nanchang.fragments;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.text.TextUtils;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.ExpandableListView;
import android.widget.Gallery;
import android.widget.TextView;

import com.sitemap.nanchang.R;
import com.sitemap.nanchang.activity.MainActivity;
import com.sitemap.nanchang.activity.PatchDesActivity;
import com.sitemap.nanchang.adapter.PatchExpListViewAdapter;
import com.sitemap.nanchang.adapter.PatchListViewAdapter;
import com.sitemap.nanchang.application.MyApplication;
import com.sitemap.nanchang.config.RequestCode;
import com.sitemap.nanchang.model.PatchExpModel;
import com.sitemap.nanchang.model.PatchModel;
import com.sitemap.nanchang.model.TaskPathModel;
import com.sitemap.nanchang.util.DialogUtil;
import com.sitemap.nanchang.util.FileNames;
import com.sitemap.nanchang.util.FileUtil;
import com.sitemap.nanchang.util.ParserUtil;
import com.sitemap.nanchang.util.ToastUtil;
import com.sitemap.nanchang.util.ZipUtils;
import com.sitemap.nanchang.view.MyProgressDialog;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * @desc 采集点 页面
 * Created by chenmeng on 2016/12/9.
 */
public class PatchFragment extends Fragment implements PatchExpListViewAdapter.OnCallBackUpdate {
    private View view;//视图
    private Context mContext;//本类
    private ExpandableListView mElv;//listview
    private List<PatchExpModel> mList = new ArrayList<>();//数据 总
    private PatchExpListViewAdapter mAdapter;//适配器
    private MyProgressDialog progressDialog;// 压缩显示的进度
    private  Handler handler=null;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        if (view == null) {
            view = inflater.inflate(R.layout.fragment_patch, null);
        }
        mContext = inflater.getContext();
        mElv = (ExpandableListView) view.findViewById(R.id.patch_list);
//        getDate();
        handler = new Handler() {
            @Override
            public void handleMessage(Message msg) {
                super.handleMessage(msg);
                if (progressDialog!=null&&progressDialog.isShowing()){
                    progressDialog.dismiss();
                }
                switch(msg.what) {
                    case 101:
                        int pos = Integer.parseInt(msg.obj.toString());
//                        lIsZip.get(pos).setUpload("0");
                        mList.get(pos).setIsZip("1");
                        onResume();
                        ToastUtil.showBottomShort(mContext,"压缩成功");
                        break;
                }

            }
        };
        return view;
    }

    @Override
    public void onResume() {
//        if (mAdapter!=null){
//            mAdapter.refresh();
//        }
        getDate();
        super.onResume();
    }

    /**
     * 遍历数据
     */
    private void getDate() {
        File appFilePath = FileUtil.createFolder(MyApplication.appRootPath);
        if (appFilePath.exists()) {
            File upLoadFile = FileUtil.createOneFolder(appFilePath, RequestCode.GATHER);
            File tempFile = FileUtil.createOneFolder(appFilePath, RequestCode.TEMP_GATHER);
            if (upLoadFile.exists()) {//uuid
                File userUuidFile = FileUtil.createOneFolder(upLoadFile, MyApplication.uuid);
                if (userUuidFile.exists()) {//创建gather目录 多个
                    mList.clear();
                    for (int i = 0; i < userUuidFile.listFiles().length; i++) {
                        if (!userUuidFile.listFiles()[i].isFile()) {
                            String typeName = userUuidFile.listFiles()[i].getName();
                            File typeNameFile = FileUtil.createOneFolder(userUuidFile, typeName);
                            PatchExpModel patchExpModel = new PatchExpModel();
                            patchExpModel.setType(typeName);
                            patchExpModel.setTypeNamePath(typeNameFile.getPath());
                            patchExpModel.setZipPath(userUuidFile.getPath());
                            patchExpModel.setIsZip("0");
                            List<PatchModel> lTask = new ArrayList<PatchModel>();
                            List<TaskPathModel> lIsZip = new ArrayList<TaskPathModel>();
                            lIsZip.clear();
                            lTask.clear();
                            if (typeNameFile.exists()) {
                                if (typeNameFile.listFiles().length>0){
                                    for (int j = 0; j < typeNameFile.listFiles().length; j++) {
                                        String number = typeNameFile.listFiles()[j].getName();
                                        File numberFile = FileUtil.createOneFolder(typeNameFile, number);
                                        File userTextFile = FileUtil.createOneFolder(numberFile, RequestCode.TEXT);
                                        TaskPathModel tpm = new TaskPathModel();
                                        PatchModel tm = new PatchModel();
                                        tpm.setUpload("0");
                                        tpm.setSrcZipPath(userUuidFile.getPath());
                                        tpm.setProjectName(number);
                                        tpm.setProjectPath(numberFile.getPath());
                                        if (userTextFile.exists()) {
                                            String text = FileUtil.readFilePath(userTextFile.getPath(), RequestCode.GATHERNAME);
                                            if (text != null) {
                                                tm = (PatchModel) ParserUtil.jsonToObject(text, PatchModel.class);
                                                tpm.setTextPath(userTextFile.getPath());
                                                tpm.setIsZip("0");
                                            }
                                        }
                                        File userImgFile = FileUtil.createOneFolder(numberFile, RequestCode.IMG);
                                        if (userImgFile.exists()) {
                                            if (userImgFile.listFiles().length > 0) {
                                                if (userImgFile.listFiles()[0].getName().contains(".jpg")) {
                                                    tm.setImgPath(userImgFile.listFiles()[0].getPath());
                                                    tpm.setJpgImgPath(userImgFile.listFiles()[0].getPath());
                                                }
                                            }
                                            tpm.setImgPath(userImgFile.getPath());
                                        }
//                                    File userVoiceFile = FileUtil.createOneFolder(numberFile, RequestCode.VOICE);
//                                    if (userVoiceFile.exists()) {
//                                        tpm.setVoicePath(userVoiceFile.getPath());
//                                    }
                                        File userVideoFile = FileUtil.createOneFolder(numberFile, RequestCode.VIDEO);
                                        if (userVideoFile.exists()) {
                                            tpm.setVideoPath(userVideoFile.getPath());
                                        }
                                        lTask.add(tm);
                                        lIsZip.add(tpm);
                                    }
                                    patchExpModel.setZipPathList(lIsZip);
                                    patchExpModel.setPatchModelList(lTask);
                                }else{
                                    patchExpModel.setPatchModelList(new ArrayList<PatchModel>());
                                }
                                mList.add(patchExpModel);
                            }

                        }
                    }
                    if (tempFile.exists()) {
                        for (int i = 0; i < tempFile.listFiles().length; i++) {
                            if (tempFile.listFiles()[i].getName().contains(".zip")) {
                                for (int j = 0; j < mList.size(); j++) {
                                    String typeName = tempFile.listFiles()[i].getName().split("_")[1];
                                    if (mList.get(j).getType().equals(typeName)) {
                                        mList.get(j).setIsZip("1");
//                                        lIsZip.get(j).setIsZip("1");
                                        mList.get(j).setTmpZipPath(tempFile.listFiles()[i].getPath());
//                                        lIsZip.get(j).setZipPath(tempFile.listFiles()[i].getPath());
                                    }
                                }
                            }
                        }
                    }
                    initExpListView(mList);
                }
            }
        }
    }

    /**
     * 更新数据
     *
     * @param typeName
     */
    public void addData(String typeName) {
        if (mList.size()>0){
            for (PatchExpModel model:mList){
                if (typeName.equals(model.getType())){
                    ToastUtil.showBottomShort(mContext,"类名已存在");
                    return;
                }
            }
        }
        File appFilePath = FileUtil.createFolder(MyApplication.appRootPath);
        if (appFilePath.exists()) {
            File upLoadFile = FileUtil.createOneFolder(appFilePath, RequestCode.GATHER);
            File tempFile = FileUtil.createOneFolder(appFilePath, RequestCode.TEMP_GATHER);
            if (upLoadFile.exists()) {//uuid
                File userUuidFile = FileUtil.createOneFolder(upLoadFile, MyApplication.uuid);
                if (userUuidFile.exists()) {
                    File typeNameFile = FileUtil.createOneFolder(userUuidFile, typeName);
                    PatchExpModel model = new PatchExpModel();
                    model.setType(typeName);
                    model.setPatchModelList(new ArrayList<PatchModel>());
                    mList.add(model);
                    initExpListView(mList);
                }
            }
        }
    }

    /**
     * 初始数据
     *
     * @param list
     */
    private void initExpListView(List<PatchExpModel> list) {
        if (list.size() > 0) {
            mAdapter = new PatchExpListViewAdapter(mContext, list, this);
            mElv.setAdapter(mAdapter);
            // 全部展开
            for (int i = 0; i < list.size(); i++) {
                mElv.expandGroup(i);
            }
            //点击事件
            mElv.setOnChildClickListener(new ExpandableListView.OnChildClickListener() {

                @Override
                public boolean onChildClick(ExpandableListView parent, View v,
                                            int groupPosition, int childPosition, long id) {
                        Intent intent = new Intent(mContext, PatchDesActivity.class);
                        intent.putExtra("type", 2);//you压缩按钮
                        Bundle b = new Bundle();
                        b.putString("typeName",mList.get(groupPosition).getType());
                        b.putString("isZip",mList.get(groupPosition).getIsZip());//是否压缩
                        b.putSerializable("PatchModel", mList.get(groupPosition).getPatchModelList().get(childPosition));
                        b.putSerializable("TaskPathModel", mList.get(groupPosition).getZipPathList().get(childPosition));
                        intent.putExtras(b);
                        startActivity(intent);
                    return true;
                }
            });
        } else {
            TextView emptyView = new TextView(mContext);
            emptyView.setLayoutParams(new Gallery.LayoutParams(Gallery.LayoutParams.FILL_PARENT, Gallery.LayoutParams.FILL_PARENT));
            emptyView.setText("暂无采集信息！");
            emptyView.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL);
            emptyView.setVisibility(View.GONE);
            ((ViewGroup) mElv.getParent()).addView(emptyView);
        }

    }

    @Override
    public void onClickAddListener(int groupPosition) {
        Intent intent = new Intent(mContext, PatchDesActivity.class);
        intent.putExtra("type", 1);//增加采集点 无压缩按钮
        intent.putExtra("typeName", mList.get(groupPosition).getType());//类别名
        startActivity(intent);
    }

    @Override
    public void onClickDeleteListener(final int groupPosition, int childPosition) {
        View viewDialog = DialogUtil.customPromptDialog(mContext, "确定", "取消",
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        if (!TextUtils.isEmpty(mList.get(groupPosition).getTypeNamePath())){
                            FileUtil.deleteFolder(new File(mList.get(groupPosition).getTypeNamePath()));
                            ToastUtil.showBottomShort(mContext,"删除成功");
                            onResume();
                        }
                    }
                }, null);
        TextView tv = (TextView) viewDialog.findViewById(R.id.dialog_tv_txt);
        tv.setText("确定要删除类别吗？");
    }

    @Override
    public void onClickUpLoadingListener(final int groupPosition, int childPosition) {
        if (mList.get(groupPosition).getIsZip().equals("1")){//已压缩
            final String delPath = mList.get(groupPosition).getTmpZipPath();
            Log.e("result","delPath:"+delPath);
            View viewDialog = DialogUtil.customPromptDialog(mContext, "确定", "取消",
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            if (!TextUtils.isEmpty(delPath)){
//                                FileUtil.deleteFolder(new File(delPath));
                                File file = new File(delPath);
                                file.delete();
                                ToastUtil.showBottomShort(mContext,"删除成功");
                                mList.get(groupPosition).setIsZip("0");
                                onResume();
                            }
                        }
                    }, null);
            TextView tv = (TextView) viewDialog.findViewById(R.id.dialog_tv_txt);
            tv.setText("确定要删除类别吗？");
        }else{
            if (progressDialog==null){
                progressDialog = MyProgressDialog.createDialog(mContext);
            }
            final ZipUtils zipUtils = new ZipUtils();
            File appFilePath = FileUtil.createFolder(MyApplication.appRootPath);
            if (appFilePath.exists()) {
                final File tempFile = FileUtil.createOneFolder(appFilePath, RequestCode.TEMP_GATHER);
                File zipFile = new File(mList.get(groupPosition).getZipPath());
                if (tempFile.exists()) {
                    final FileNames names = new FileNames();
                    String zip = "";
                    File[] files = zipFile.listFiles();
                    for (File file : files) {
                        if (file.getName().equals(mList.get(groupPosition).getType())) {
                            zip = file.getPath();
                        }
                    }
                    if (TextUtils.isEmpty(zip)) {
                        ToastUtil.showBottomShort(mContext, "压缩文件不存在");
                        return;
                    }
                    progressDialog.setMessage("压缩中...");
                    progressDialog.show();
                    final String msg = zip;
                    // 将压缩放入线程中
                    Thread thread = new Thread(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                zipUtils.setCallBack(new ZipUtils.ZipOverCallBack() {
                                    @Override
                                    public void onZipOver() {
                                        Message msg = handler.obtainMessage();
                                        msg.what = 101;
                                        msg.obj = String.valueOf(groupPosition);
                                        handler.sendMessage(msg);
                                    }
                                });
                                String path = zipUtils.zip(msg, tempFile.getPath(), names.getZipGatherName(mList.get(groupPosition).getType()), MyApplication.uuid);
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    });
                    thread.start();
                }
            }
        }

    }

    /**
     * 单个删除
     * @param groupPosition
     * @param childPosition
     */
    @Override
    public void onClickDeleteOneListener(int groupPosition, int childPosition) {
        final String delPath = mList.get(groupPosition).getZipPathList().get(childPosition).getProjectPath();
        View viewDialog = DialogUtil.customPromptDialog(mContext, "确定", "取消",
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        if (!TextUtils.isEmpty(delPath)){
                            FileUtil.deleteFolder(new File(delPath));
                            ToastUtil.showBottomShort(mContext,"删除成功");
                            onResume();
                        }
                    }
                }, null);
        TextView tv = (TextView) viewDialog.findViewById(R.id.dialog_tv_txt);
        tv.setText("确定要删除类别吗？");
    }
}
